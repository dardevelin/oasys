<?php
/**
 * Copyright 2013 DreamFactory Software, Inc. <support@dreamfactory.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace DreamFactory\Oasys\Components;

use DreamFactory\Oasys\Components\OAuth\Enums\OAuthGrantTypes;
use DreamFactory\Oasys\Components\OAuth\Enums\OAuthTokenTypes;
use DreamFactory\Oasys\Components\OAuth\Enums\OAuthTypes;
use DreamFactory\Oasys\Components\OAuth\GrantTypes\AuthorizationCode;
use DreamFactory\Oasys\Components\OAuth\GrantTypes\ClientCredentials;
use DreamFactory\Oasys\Components\OAuth\GrantTypes\Password;
use DreamFactory\Oasys\Components\OAuth\GrantTypes\RefreshToken;
use DreamFactory\Oasys\Components\OAuth\Interfaces\OAuthServiceLike;
use DreamFactory\Oasys\Interfaces\ProviderLike;
use DreamFactory\Oasys\Interfaces\StorageProviderLike;
use Kisma\Core\Exceptions\NotImplementedException;
use Kisma\Core\Interfaces\HttpMethod;
use Kisma\Core\Seed;
use Kisma\Core\SeedBag;
use Kisma\Core\Utility\Curl;
use Kisma\Core\Utility\Log;
use Kisma\Core\Utility\FilterInput;
use Kisma\Core\Utility\Inflector;
use Kisma\Core\Utility\Option;

/**
 * OAuthClient
 * An portal client base that knows how to talk OAuth2
 *
 * Subclasses must implement _loadToken and _saveToken methods
 */
class OAuthClient extends Seed implements OAuthServiceLike, HttpMethod
{
	//**************************************************************************
	//* Members
	//**************************************************************************

	/**
	 * @var StorageProviderLike
	 */
	protected $_store;
	/**
	 * @var string The client id, or public key
	 */
	protected $_clientId = null;
	/**
	 * @var string The client secret, or private key
	 */
	protected $_clientSecret = null;
	/**
	 * @var int The default OAuth authentication type
	 */
	protected $_authType = OAuthTypes::URI;
	/**
	 * @var string The default grant type is 'authorization_code'
	 */
	protected $_grantType = OAuthGrantTypes::AUTHORIZATION_CODE;
	/**
	 * @var string The application inbound redirect URI
	 */
	protected $_redirectUri = null;
	/**
	 * @var string The OAuth scope
	 */
	protected $_scope = null;
	/**
	 * @var string The OAuth access token parameter name for the requests
	 */
	protected $_accessTokenParamName = 'access_token';
	/**
	 * @var string The value to put in the "Authorization" header (i.e. Authorization: OAuth OAUTH-TOKEN). This can vary from service to service
	 */
	protected $_authHeaderName = 'OAuth';
	/**
	 * @var string The service authorization URL
	 */
	protected $_authorizeUrl = null;
	/**
	 * @var string The endpoint for authorization
	 */
	protected $_authorizeEndpoint = '/oauth/authorize';
	/**
	 * @var string The endpoint for granting tokens
	 */
	protected $_tokenEndpoint = '/oauth/access_token';
	/**
	 * @var string The granted OAuth access token for the service
	 */
	protected $_accessToken = null;
	/**
	 * @var string The type of access token desired
	 */
	protected $_accessTokenType = OAuthTokenTypes::URI;
	/**
	 * @var string The access token secret key
	 */
	protected $_accessTokenSecret = null;
	/**
	 * @var string The hash algorithm used for signing requests
	 */
	protected $_hashAlgorithm = null;
	/**
	 * @var string The OAuth refresh token for the service
	 */
	protected $_refreshToken = null;
	/**
	 * @var string
	 */
	protected $_redirectProxyUrl = null;
	/**
	 * @var bool If true, redirects will be generated by this class. Otherwise it is up to the consumer to redirect the end-user.
	 */
	protected $_interactive = true;

	//**************************************************************************
	//* Methods
	//**************************************************************************

	/**
	 * @param array|\stdClass $options
	 *
	 * @throws \InvalidArgumentException
	 * @return \DreamFactory\Oasys\Components\OAuthClient
	 */
	public function __construct( $options = array() )
	{
		$options['redirect_uri'] = $this->_redirectUri ? : Option::get( $options, 'redirect_uri' );

		parent::__construct( $options );

		if ( !empty( $this->_certificateFile ) && ( !is_file( $this->_certificateFile ) || !is_readable( $this->_certificateFile ) ) )
		{
			throw new \InvalidArgumentException( 'The specified certificate file "' . $this->_certificateFile . '" was not found' );
		}

		//	Load any token we may have...
		$this->_loadToken();
	}

	/**
	 * Check if we are authorized or not...
	 *
	 * @param bool  $startFlow        If true, and we are not authorized, checkAuthenticationProgress() is called.
	 * @param array $payload          Payload to pass along
	 *
	 * @return bool|string
	 */
	public function authorized( $startFlow = false, $payload = array() )
	{
		if ( empty( $this->_accessToken ) )
		{
			if ( false !== $startFlow )
			{
				return $this->checkAuthenticationProgress( $this->_interactive, $payload );
			}

			return false;
		}

		return true;
	}

	/**
	 * Loads a token from the store
	 *
	 * @return bool
	 */
	protected function _loadToken()
	{
		if ( null !== ( $_token = $this->get( 'access_token' ) ) )
		{
			$this->setAccessToken( $_token );

			return true;
		}

		return false;
	}

	/**
	 * Saves a token to session
	 *
	 * @throws \Kisma\Core\Exceptions\NotImplementedException
	 * @return bool
	 */
	protected function _saveToken()
	{
		$this->set( 'access_token', $this->getAccessToken() );
	}

	/**
	 * Validate that the required parameters are supplied for the type of grant selected
	 *
	 * @param string          $grantType
	 * @param array|\stdClass $payload
	 *
	 * @return array|\stdClass|void
	 * @throws \InvalidArgumentException
	 */
	protected function _validateGrantType( $grantType, $payload )
	{
		switch ( $grantType )
		{
			case OAuthGrantTypes::AUTHORIZATION_CODE:
				return AuthorizationCode::validatePayload( $payload );

			case OAuthGrantTypes::PASSWORD:
				return Password::validatePayload( $payload );

			case OAuthGrantTypes::CLIENT_CREDENTIALS:
				return ClientCredentials::validatePayload( $payload );

			case OAuthGrantTypes::REFRESH_TOKEN:
				return RefreshToken::validatePayload( $payload );

			default:
				throw new \InvalidArgumentException( 'Invalid grant type "' . $grantType . '" specified.' );
		}
	}

	/**
	 * Checks the progress of any in-flight OAuth requests
	 *
	 * @param bool  $redirect If TRUE, redirect to the authorization url instead of returning it.
	 * @param array $payload  Additional parameters to send through to authentication service
	 *
	 * @return string
	 */
	public function checkAuthenticationProgress( $redirect = true, $payload = array() )
	{
		$_code = FilterInput::get( INPUT_GET, 'code' );

		//	No code is present, request one
		if ( empty( $_code ) )
		{
			$_payload = array_merge(
				Option::clean( $payload ),
				array(
					 'redirect_uri' => $this->_redirectUri,
					 'client_id'    => $this->_clientId,
				)
			);

			$_redirectUrl = $this->getAuthorizationUrl( $_payload );

			if ( !empty( $this->_redirectProxyUrl ) )
			{
				$_redirectUrl = $this->_redirectProxyUrl . '?redirect=' . urlencode( $_redirectUrl );
			}

			if ( true !== $redirect )
			{
				return $_redirectUrl;
			}

			header( 'Location: ' . $_redirectUrl );
			exit();
		}

		//	Got a code, now get a token
		$_token = $this->requestAccessToken(
			OAuthGrantTypes::AUTHORIZATION_CODE,
			array_merge(
				Option::clean( $payload ),
				array(
					 'code'         => $_code,
					 'redirect_uri' => $this->_redirectUri
				)
			)
		);

		$_info = null;

		if ( null !== ( $_result = Option::get( $_token, 'result' ) ) )
		{
			parse_str( $_token['result'], $_info );
		}

		if ( null !== ( $_error = Option::get( $_info, 'error' ) ) )
		{
			//	Error
			Log::error( 'Error returned from oauth token request: ' . print_r( $_info, true ) );

			return false;
		}

		$this->_accessToken = Option::get( $_info, 'access_token' );

		return true;
	}

	/**
	 * @param string $grantType
	 * @param array  $payload
	 *
	 * @return mixed
	 * @throws \InvalidArgumentException
	 */
	public function requestAccessToken( $grantType = OAuthGrantTypes::AUTHORIZATION_CODE, array $payload = array() )
	{
		$_payload = $this->_validateGrantType( $grantType, $payload );
		$_payload['grant_type'] = $grantType;

		$_headers = array();

		switch ( $this->_authType )
		{
			case OAuthTypes::URI:
			case OAuthTypes::FORM:
				$_payload['client_id'] = $this->_clientId;
				$_payload['client_secret'] = $this->_clientSecret;
				break;

			case OAuthTypes::BASIC:
				$_payload['client_id'] = $this->_clientId;
				$_headers[] = 'Authorization: Basic ' . base64_encode( $this->_clientId . ':' . $this->_clientSecret );
				break;

			default:
				throw new \InvalidArgumentException( 'The auth type "' . $this->_authType . '" is invalid.' );
		}

//		return $this->_makeRequest( $this->getAuthEndpoint( $this->_tokenEndpoint ), $_payload, static::Post, $_headers );
	}

	/**
	 * Fetch a protected resource
	 *
	 * @param string $resource
	 * @param array  $payload
	 * @param string $method
	 * @param array  $headers
	 * @param int    $contentType
	 *
	 * @throws \InvalidArgumentException
	 * @return array
	 */
	public function fetch( $resource, $payload = array(), $method = 'GET', array $headers = array() )
	{
		//	Use the resource url if provided...
		if ( $this->_accessToken )
		{
			switch ( $this->_accessTokenType )
			{
				case OAuthTokenTypes::URI:
					if ( !empty( $this->_authHeaderName ) )
					{
						$headers[] = 'Authorization: ' . $this->_authHeaderName . ' ' . $this->_accessToken;
					}
					else
					{
						$payload[$this->_accessTokenParamName] = $this->_accessToken;
					}
					break;

				case OAuthTokenTypes::BEARER:
					if ( !empty( $this->_authHeaderName ) )
					{
						$headers[] = 'Authorization: ' . $this->_authHeaderName . ' ' . $this->_accessToken;
					}
					else
					{
						$headers[] = 'Authorization: Bearer ' . $this->_accessToken;
					}
					break;

				case OAuthTokenTypes::OAUTH:
					if ( !empty( $this->_authHeaderName ) )
					{
						$headers[] = 'Authorization: ' . $this->_authHeaderName . ' ' . $this->_accessToken;
					}
					else
					{
						$headers[] = 'Authorization: OAuth ' . $this->_accessToken;
					}
					break;

				case OAuthTokenTypes::MAC:
					$headers[] = 'Authorization: MAC ' . $this->_signRequest( $_url, $payload, $method );
					break;

				default:
					throw new \InvalidArgumentException( 'Unknown access token type.' );
			}
		}

		return $this->_makeRequest( $_url, $payload, $method, $headers, $contentType );
	}

	/**
	 * Construct a link to authorize the application
	 *
	 * @param array $payload
	 *
	 * @return string
	 */
	public function getAuthorizationUrl( $payload = array() )
	{
		$_payload = array_merge(
			array(
				 'response_type' => 'code',
				 'client_id'     => $this->_clientId,
				 'redirect_uri'  => $this->_redirectUri,
				 'scope'         => is_array( $this->_scope ) ? implode( ',', $this->_scope ) : $this->_scope,
			),
			Option::clean( $payload )
		);

		$_qs = http_build_query( $_payload );

		return $this->_authorizeUrl = ( $this->getServiceEndpoint( $this->_authorizeEndpoint ) . '?' . $_qs );
	}

	/**
	 * Generate the MAC signature
	 *
	 * @param string $url         Called URL
	 * @param array  $payload     Parameters
	 * @param string $method      Http Method
	 *
	 * @throws \Kisma\Core\Exceptions\NotImplementedException
	 * @return string
	 */
	protected function _signRequest( $url, $payload, $method )
	{
		throw new NotImplementedException( 'This type of authorization is not not implemented.' );
	}

	/**
	 * @param string $accessToken
	 *
	 * @return OAuthClient
	 */
	public function setAccessToken( $accessToken )
	{
		$this->_accessToken = $accessToken;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getAccessToken()
	{
		return $this->_accessToken;
	}

	/**
	 * @param string $accessTokenParamName
	 *
	 * @return OAuthClient
	 */
	public function setAccessTokenParamName( $accessTokenParamName )
	{
		$this->_accessTokenParamName = $accessTokenParamName;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getAccessTokenParamName()
	{
		return $this->_accessTokenParamName;
	}

	/**
	 * @param string $accessTokenSecret
	 *
	 * @return OAuthClient
	 */
	public function setAccessTokenSecret( $accessTokenSecret )
	{
		$this->_accessTokenSecret = $accessTokenSecret;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getAccessTokenSecret()
	{
		return $this->_accessTokenSecret;
	}

	/**
	 * Set the access token type
	 *
	 * @param int    $accessTokenType Access token type
	 * @param string $secret          The secret key used to encrypt the MAC header
	 * @param string $algorithm       Algorithm used to encrypt the signature
	 *
	 * @return $this
	 * @return OAuthClient
	 */
	public function setAccessTokenType( $accessTokenType, $secret = null, $algorithm = null )
	{
		$this->_accessTokenType = $accessTokenType;
		$this->_accessTokenSecret = $secret;
		$this->_hashAlgorithm = $algorithm;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getAccessTokenType()
	{
		return $this->_accessTokenType;
	}

	/**
	 * @param int $authType
	 *
	 * @return OAuthClient
	 */
	public function setAuthType( $authType )
	{
		$this->_authType = $authType;

		return $this;
	}

	/**
	 * @return int
	 */
	public function getAuthType()
	{
		return $this->_authType;
	}

	/**
	 * @param string $authorizeEndpoint
	 *
	 * @return OAuthClient
	 */
	public function setAuthorizeEndpoint( $authorizeEndpoint )
	{
		$this->_authorizeEndpoint = $authorizeEndpoint;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getAuthorizeEndpoint()
	{
		return $this->_authorizeEndpoint;
	}

	/**
	 * @param string $authorizeUrl
	 *
	 * @return OAuthClient
	 */
	public function setAuthorizeUrl( $authorizeUrl )
	{
		$this->_authorizeUrl = $authorizeUrl;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getAuthorizeUrl()
	{
		return $this->_authorizeUrl;
	}

	/**
	 * @param string $grantType
	 *
	 * @return OAuthClient
	 */
	public function setGrantType( $grantType )
	{
		$this->_grantType = $grantType;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getGrantType()
	{
		return $this->_grantType;
	}

	/**
	 * @param string $hashAlgorithm
	 *
	 * @return OAuthClient
	 */
	public function setHashAlgorithm( $hashAlgorithm )
	{
		$this->_hashAlgorithm = $hashAlgorithm;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getHashAlgorithm()
	{
		return $this->_hashAlgorithm;
	}

	/**
	 * @param string $clientSecret
	 *
	 * @return OAuthClient
	 */
	public function setClientSecret( $clientSecret )
	{
		$this->_clientSecret = $clientSecret;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getClientSecret()
	{
		return $this->_clientSecret;
	}

	/**
	 * @param string $clientId
	 *
	 * @return OAuthClient
	 */
	public function setClientId( $clientId )
	{
		$this->_clientId = $clientId;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getClientId()
	{
		return $this->_clientId;
	}

	/**
	 * @param string $redirectUri
	 *
	 * @return OAuthClient
	 */
	public function setRedirectUri( $redirectUri )
	{
		$this->_redirectUri = $redirectUri;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getRedirectUri()
	{
		return $this->_redirectUri;
	}

	/**
	 * @param string $refreshToken
	 *
	 * @return OAuthClient
	 */
	public function setRefreshToken( $refreshToken )
	{
		$this->_refreshToken = $refreshToken;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getRefreshToken()
	{
		return $this->_refreshToken;
	}

	/**
	 * @param string $scope
	 *
	 * @return OAuthClient
	 */
	public function setScope( $scope )
	{
		$this->_scope = $scope;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getScope()
	{
		return $this->_scope;
	}

	/**
	 * @param string $tokenEndpoint
	 *
	 * @return OAuthClient
	 */
	public function setTokenEndpoint( $tokenEndpoint )
	{
		$this->_tokenEndpoint = $tokenEndpoint;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getTokenEndpoint()
	{
		return $this->_tokenEndpoint;
	}

	/**
	 * @param string $authHeaderName
	 *
	 * @return OAuthClient
	 */
	public function setAuthHeaderName( $authHeaderName )
	{
		$this->_authHeaderName = $authHeaderName;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getAuthHeaderName()
	{
		return $this->_authHeaderName;
	}

	/**
	 * @param string $redirectProxyUrl
	 *
	 * @return OAuthClient
	 */
	public function setRedirectProxyUrl( $redirectProxyUrl )
	{
		$this->_redirectProxyUrl = $redirectProxyUrl;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getRedirectProxyUrl()
	{
		return $this->_redirectProxyUrl;
	}

	/**
	 * @param boolean $interactive
	 *
	 * @return OAuthClient
	 */
	public function setInteractive( $interactive )
	{
		$this->_interactive = $interactive;

		return $this;
	}

	/**
	 * @return boolean
	 */
	public function getInteractive()
	{
		return $this->_interactive;
	}

	/**
	 * Retrieves a value at the given key location, or the default value if key isn't found.
	 * Setting $burnAfterReading to true will remove the key-value pair from the bag after it
	 * is retrieved. Call with no arguments to get back a KVP array of contents
	 *
	 * @param string $key
	 * @param mixed  $defaultValue
	 * @param bool   $burnAfterReading
	 *
	 * @throws \Kisma\Core\Exceptions\BagException
	 * @return mixed
	 */
	public function get( $key = null, $defaultValue = null, $burnAfterReading = false )
	{
		return $this->_store->get( $key, $defaultValue, $burnAfterReading );
	}

	/**
	 * @param string $key
	 * @param mixed  $value
	 * @param bool   $overwrite
	 *
	 * @throws \Kisma\Core\Exceptions\BagException
	 * @return SeedBag
	 */
	public function set( $key, $value, $overwrite = true )
	{
		return $this->_store->set( $key, $value, $overwrite );
	}

	/**
	 * Unlink/disconnect/logout user from provider locally.
	 * Does nothing on the provider end
	 *
	 * @return void
	 */
	public function deauthorize()
	{
	}

	/**
	 * Returns true/false if user is authorized to talk to this provider
	 *
	 * @param array $options Authentication options
	 *
	 * @return $this|ProviderLike|void
	 */
	public function authenticate( $options = array() )
	{
	}
}
